Cover:
Good afternoon.  I would be presenting my bachelor's thesis on the development of IT solutions and services for the green market.
Introduction:
The main purpose of this work was to develop a system that would be useful for a plant-selling business.
By automating and streamlining various processes within it, the work aims to increase productivity in a high-social-impact area of business.
Additionally, we would discuss architectural ideas that came into the system as we come into them.
Use Cases:
From the preliminary analysis, we concluded that there are three main groups of users: consumers, producers, and managers. Each group has unique goals and needs within the system.
For example, consumers are primarily focused on accessing information, such as instructions for growing plants and finding plants for sale.
Producers, on the other hand, need to manage inventory, post plants for sale, and write instructions for growing plants. 
Meanwhile, managers are primarily concerned with the operations of the business, such as analyzing statistics, managing employees, and reviewing historical data.
Architecture:
As we have previously seen, the goals of different user types are not the same.
Additionally, those goals may be grouped into different buckets, such as consumers being primarily read users and producers being primarily write users.
CQRS:
To accommodate these differing user needs, we used a design pattern called Command Query Responsibility Segregation (CQRS).
This approach separates the read and write models of the system, avoiding a data model with a "compromise", where the same model is used for both reads and writes.
By using different data storages for reads and writes and lazily updating the read model to match the write model, we were able to create a more efficient and flexible system.
DDD:
We have used Domain-Driven Design (DDD) to model the domain of the problem.
DDD allowed us to describe the problem's domain using a ubiquitous language that is understandable to both the client and the developer.
Our diagram represents the read model and includes business terms like delivery address and user role without a normalized data model.
Conventional diagram:
So, now that we are done with the read model, we may review the write model.
Initially, we tried to use a conventional, highly normalized database design for the write model.
However, we found this approach to be too complex, non-intuitive, and hard to sync with the read model.
Event Sourcing:
We then adopted the concept of event sourcing, which allowed us to simplify the process of syncing the read model and improve the ease of understanding of the write model.
Final slide:
In summary, the work I have presented has achieved its goals.
Additionally, by adopting suitable architectural approaches, we were able to create a system that caters to the unique needs of consumers, producers, and managers.
Thank you for listening, and I'd be happy to answer any questions you might have.