Cover:
Good afternoon.Â  I would be presenting my bachelor's thesis on the development 
of IT solutions and services for the green market.
Introduction:
The main purpose of this work was to develop a system that would be useful for a plant-selling business.
Such business operates within the ecological sector, which is quite important nowadays.
Following from that, increasing the productivity of such a business via development of an automated solution
would be beneficial.
Use Cases:
From the preliminary analysis, we concluded that there are three main groups of users: 
consumers, producers, and managers. Each group has unique goals and needs within the system.
Let's review the consumers use cases within the application.
(Demo Search plants, order a plant, search for instructions)
So, next we can demo the producer
(Demo Creating and Editing Plant and Writing an Instruction)
The last type of user is the Manager
(Demo Statistics and History)
As we can see from the demonstration the goals of users are quite different.
Namely, the consumers are primarly interested in reading the data, 
while the producers are mainly interested in writing the data
CQRS:
To accommodate these differing user needs, we used a design pattern of Command Query Responsibility Segregation (CQRS).
Using this approach we separate the read and write models of the system.
By doing so, we avoid a data model that is a "compromise", where the same model is used for both reads and writes.
Read model (DDD):
To create the read model, we have used the ideas of Domain-Driven Design (DDD).
DDD allowed us to describe the problem's domain using a ubiquitous language 
that is understandable to both the client and the developer.
The diagram includes business terms like delivery address and user role without a normalized data model.
Write model (Events):
So, outside of the read model for the application there is also a write model.
The write model uses events to store the information.
The events are grouped within the Aggregate that encompasses them and 
the events represent actual events that might be dscibed to happen within the system by a business analist.
Event Sourcing:
The concept upon which the write model is built is event sourcing.
The main idea here is that the actual events should be stored and treated like the source of truth 
and not the reaction our system had on them.
This architectural approach allowed us to simplify the process of syncing the read model 
and improve the ease of understanding of the write model as it is built with events.
Final slide:
In conclusion:
- the processes were analyzed and modeled
- the model was succesfully realized 
- the realization used interesting and unique artchitectural approaches.

Thank you for listening. Do you have any questions?